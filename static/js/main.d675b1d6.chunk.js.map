{"version":3,"sources":["components/TriangulationBox/TriangulationBox.tsx","components/ControlPanel/ControlPanel.tsx","index.tsx"],"names":["TriangulationBox","props","canvasBox","useRef","vertices","triangles","geometry","useMemo","Geometry","faces","forEach","item","push","Vector3","Face3","verticesNeedUpdate","elementsNeedUpdate","computeFaceNormals","useEffect","material","MeshPhongMaterial","color","box","Mesh","light","DirectionalLight","position","set","scene","Scene","add","camera","PerspectiveCamera","z","current","control","OrbitControls","renderer","WebGLRenderer","alpha","canvas","antialias","setSize","clientWidth","clientHeight","setAnimationLoop","rotation","x","y","render","dispose","className","ref","ControlPanel","width","height","dept","useState","boxGeometryState","setBoxGeometryState","type","defaultValue","onClick","get","value","fetch","then","res","json","data","ReactDOM","StrictMode","document","querySelector"],"mappings":"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","file":"static/js/main.d675b1d6.chunk.js","sourcesContent":["import React, {useEffect, useMemo, useRef} from 'react';\r\nimport {OrbitControls} from 'three/examples/jsm/controls/OrbitControls';\r\nimport {\r\n  Geometry,\r\n  Vector3,\r\n  Face3,\r\n  MeshPhongMaterial,\r\n  Mesh,\r\n  DirectionalLight,\r\n  Scene,\r\n  WebGLRenderer,\r\n  PerspectiveCamera,\r\n} from 'three';\r\nimport './styles.sass';\r\n\r\nfunction TriangulationBox(props: TBoxGeometry) {\r\n  const canvasBox = useRef<HTMLCanvasElement>(null);\r\n  const {vertices, triangles} = props;\r\n\r\n  const geometry = useMemo(() => new Geometry(), []);\r\n  geometry.vertices = [];\r\n  geometry.faces = [];\r\n  vertices.forEach((item: number[]) => {\r\n    geometry.vertices.push(new Vector3(...item));\r\n  });\r\n  triangles.forEach((item: number[]) => {\r\n    geometry.faces.push(new Face3(item[0], item[1], item[2]));\r\n    geometry.faces.push(new Face3(item[3], item[4], item[5]));\r\n  });\r\n  geometry.verticesNeedUpdate = true;\r\n  geometry.elementsNeedUpdate = true;\r\n  geometry.computeFaceNormals();\r\n\r\n  useEffect(() => {\r\n    const material = new MeshPhongMaterial({color: 0x00ff00});\r\n    const box = new Mesh(geometry, material);\r\n\r\n    const light = new DirectionalLight(0xffffff, 1);\r\n    light.position.set(-1, -1, 20);\r\n\r\n    const scene = new Scene();\r\n    scene.add(box);\r\n    scene.add(light);\r\n\r\n    const camera = new PerspectiveCamera(60, 1, 0.1, 1000);\r\n    camera.position.z = 420;\r\n\r\n    if (canvasBox.current !== null) {\r\n      const control = new OrbitControls(camera, canvasBox.current);\r\n\r\n      const animate = () => {\r\n        box.rotation.x += 0.01;\r\n        box.rotation.y += 0.01;\r\n        renderer.render(scene, camera);\r\n      };\r\n\r\n      const renderer = new WebGLRenderer({alpha: true, canvas: canvasBox.current, antialias: true});\r\n      renderer.setSize(canvasBox.current.clientWidth, canvasBox.current.clientHeight);\r\n      renderer.setAnimationLoop(animate);\r\n\r\n      return () => {\r\n        control.dispose();\r\n        renderer.dispose();\r\n        geometry.dispose();\r\n      }\r\n    }\r\n  }, [geometry])\r\n\r\n  return (\r\n    <canvas className=\"triangulation-box\" ref={canvasBox}>\r\n    </canvas>\r\n  );\r\n}\r\n\r\nexport default TriangulationBox;\r\n","import React, {useRef, useState} from 'react';\r\nimport TriangulationBox from '../TriangulationBox/TriangulationBox';\r\nimport './styles.sass';\r\n\r\nconst ControlPanel = () => {\r\n  const initBox: TBoxGeometry = {\r\n    x: 0,\r\n    y: 0,\r\n    z: 0,\r\n    vertices: [],\r\n    triangles: [],\r\n  }\r\n  const width = useRef<HTMLInputElement>(null);\r\n  const height = useRef<HTMLInputElement>(null);\r\n  const dept = useRef<HTMLInputElement>(null);\r\n\r\n  const [boxGeometryState, setBoxGeometryState] = useState(initBox);\r\n\r\n  const url = 'https://apishare.herokuapp.com/triangulation_box';\r\n\r\n  const getBoxValues = () => {\r\n    if (width.current !== null && height.current !== null && dept.current !== null) {\r\n      const get = `?width=${width.current.value}&height=${height.current.value}&dept=${dept.current.value}`;\r\n      fetch(url + get)\r\n        .then(res => res.json())\r\n        .then(data => setBoxGeometryState(data));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form className=\"control\">\r\n      <div className=\"control__element\">\r\n        <TriangulationBox {...boxGeometryState}/>\r\n      </div>\r\n      <fieldset className=\"control__panel\">\r\n        <legend>\r\n          Control Panel\r\n        </legend>\r\n        <label className=\"control__panel-item\">\r\n          <input\r\n            className=\"control__min-value\"\r\n            type=\"number\"\r\n            ref={width}\r\n            defaultValue={200}\r\n          />\r\n          Width\r\n        </label>\r\n        <label className=\"control__panel-item\">\r\n          <input\r\n            className=\"control__max-value\"\r\n            type=\"number\"\r\n            ref={height}\r\n            defaultValue={200}\r\n          />\r\n          Height\r\n        </label>\r\n        <label className=\"control__panel-item\">\r\n          <input\r\n            className=\"control__value-from\"\r\n            type=\"number\"\r\n            ref={dept}\r\n            defaultValue={200}\r\n          />\r\n          Dept\r\n        </label>\r\n        <button\r\n          className=\"control__panel-button\"\r\n          type=\"button\"\r\n          onClick={getBoxValues}\r\n        >\r\n          Create Box\r\n        </button>\r\n      </fieldset>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default ControlPanel;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ControlPanel from './components/ControlPanel/ControlPanel';\nimport './index.sass';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ControlPanel/>\n  </React.StrictMode>,\n  document.querySelector('.app-main')\n);\n"],"sourceRoot":""}